// React imports
import { useState, useEffect } from "react";

// Next imports
import type { NextPage } from "next";
import Head from "next/head";

// Component imports
import styles from "../styles/Home.module.css";
import { constants } from "../constants/constants";
import {
  CategoryBar,
  BallotCard,
  BallotCardAction,
  BallotTitle,
} from "../constants/theme.constants";

// MUI imports
import {
  Avatar,
  Button,
  Box,
  Grid,
  Typography,
  Modal,
  IconButton,
} from "@mui/material";
import CloseIcon from "@mui/icons-material/Close";


// Success modal style
const style = {
  position: "absolute" as "absolute",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  width: 400,
  bgcolor: "background.paper",
  border: "2px solid #000",
  boxShadow: 24,
  p: 4,
};

// Ballot interface
interface Ballot {
  id: string;
  photoUrL: string;
  title: number;
}

// Category's interface which contains list of ballots
interface Category {
  id: string;
  items: Ballot[];
  title: number;
}

// Slected ballot interface
interface SelectedBallot {
  categoryId: string;
  ballotId: string;
}

/**
 * Function to display Movie Awards 2021 page
 */
const Home: NextPage = () => {
  const [movies, setmMvies] = useState<Category[]>([]);
  const [selectedBallots, setSelectedBallots] = useState<SelectedBallot[]>([]);
  const [open, setOpen] = useState(false);
  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);

  useEffect(() => {
    fetchMovies();
  }, []);

  /**
   * Function to fetch ballots list
   */
  const fetchMovies = async () => {
    try {
      const response = await fetch(constants.urls.fetchBallots, {
        headers: {
          Accept: "*/*",
        },
      });
      const jsonData = await response.json();
      setmMvies(jsonData.items);
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };

  /**
   * Function to push the selected ballot to selectedBallots list if it already does not exist
   * @param categoryId
   * @param ballotId
   */
  const selectBallot = (categoryId: string, ballotId: string) => {
    // Check if a selectedBallot with the same categoryId already exists
    const categoryExists = selectedBallots.some(
      (selected) => selected.categoryId === categoryId
    );

    if (!categoryExists) {
      setSelectedBallots((prevSelectedBallots) => [
        ...prevSelectedBallots,
        {
          categoryId: categoryId,
          ballotId: ballotId,
        },
      ]);
    }
  };

  /**
   * Function to check if the ballot with the same category id exists
   * @param categoryId
   * @param ballotId
   * @returns Boolean
   */
  const IsSelected = (categoryId: string, ballotId: string) => {
    return selectedBallots.some(
      (selected) =>
        selected.categoryId === categoryId && selected.ballotId === ballotId
    );
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Take Home Test</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Typography>AWARDS 2021</Typography>

        <Box>
          {movies.map((category) => (
            <Grid>
              <CategoryBar>
                <Typography> {category.title}</Typography>
              </CategoryBar>
              <Grid container>
                {category.items.map((ballot) => {
                  const isSelected = IsSelected(category.id, ballot.id);
                  return (
                    <Grid item md={3} sm={4} xs={12}>
                      <BallotCard
                        sx={{
                          backgroundColor: isSelected ? "#009B86" : "green", // Conditional background color
                        }}
                      >
                        <BallotCardAction>
                          <BallotTitle gutterBottom variant="h5">
                            {ballot.title}
                          </BallotTitle>
                          <Avatar
                            sx={{ margin: "auto" }}
                            alt="Remy Sharp"
                            src={ballot.photoUrL}
                          />
                          <Button
                            variant="contained"
                            sx={{ marginTop: "1rem" }}
                            onClick={() => selectBallot(category.id, ballot.id)}
                          >
                            <Typography>Select Button</Typography>
                          </Button>
                        </BallotCardAction>
                      </BallotCard>
                    </Grid>
                  );
                })}
              </Grid>
            </Grid>
          ))}
          <Button
            variant="contained"
            sx={{ marginTop: "1rem", background: "#009B86" }}
            onClick={handleOpen}
          >
            <Typography>Submit ballot button</Typography>
          </Button>
          <Modal
            open={open}
            onClose={handleClose}
            aria-labelledby="modal-modal-title"
            aria-describedby="modal-modal-description"
          >
            <Box sx={style}>
              <Box sx={{ textAlign: "end" }}>
                <IconButton onClick={handleClose}>
                  <CloseIcon />
                </IconButton>
              </Box>
              <Typography
                id="modal-modal-title"
                variant="h6"
                component="h2"
                sx={{ textAlign: "center" }}
              >
                Success
              </Typography>
            </Box>
          </Modal>
        </Box>
      </main>
    </div>
  );
};

export default Home;
